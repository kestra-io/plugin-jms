plugins {
    id "com.vanniktech.maven.publish" version "0.34.0"
    id "io.kestra.gradle.inject-bom-versions" version "1.0.0"
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.gradleup.shadow" version "9.2.2"
    id 'signing'
    id "com.github.ben-manes.versions" version "0.53.0"
    id 'net.researchgate.release' version '3.1.0'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

group = "io.kestra.plugin"
description = 'Plugin JMS for Kestra'

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // kestra
    annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    compileOnly group: "io.kestra", name: "core", version: kestraVersion
    compileOnly group: "io.kestra", name: "script", version: kestraVersion

    // JMS adapter
    implementation group: "at.conapi.oss", name: "jms-adapter", version: "1.0.1"
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme = "mocha-parallel"
    showExceptions = true
    showFullStackTraces = true
    showStandardStreams = true
    showPassedStandardStreams = false
    showSkippedStandardStreams = true
}

/**********************************************************************************************************************\
 * Copy Test Libs for Examples
 **********************************************************************************************************************/
task copyTestLibs(type: Copy) {
    description = 'Copies RabbitMQ, ActiveMQ Artemis, and ActiveMQ Classic JMS client libs to build/test-libs for manual testing examples'
    from configurations.testRuntimeClasspath.filter {
        it.name.contains('rabbitmq-jms') ||
        it.name.contains('amqp-client') ||
        it.name.startsWith('artemis-') ||  // Get ALL artemis JARs (jakarta-client, commons, core-client, selector)
        it.name.startsWith('netty-') ||    // Get Netty for Artemis transport
        it.name.startsWith('activemq-') || // Get ActiveMQ Classic client JARs
        it.name.startsWith('hawtbuf-') ||  // ActiveMQ Classic dependency
        it.name.startsWith('geronimo-') || // ActiveMQ Classic JMS spec dependency
        it.name.startsWith('commons-')     // Get Apache Commons libraries (beanutils, collections, logging)
    }
    into 'build/test-libs'
}

// Ensure copyTestLibs runs as part of the build process (even when tests are skipped)
assemble.dependsOn copyTestLibs

task copyPluginForDocker(type: Copy) {
    description = 'Creates version-neutral copy of plugin JAR for Docker mounting'
    from shadowJar
    into 'build/libs'
    rename { 'plugin-jms-docker.jar' }
}

// Ensure copyPluginForDocker runs after assembling (shadowJar is part of assemble)
assemble.finalizedBy copyPluginForDocker

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly 'org.projectlombok:lombok'

    // micronaut
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    // test deps needed only for to have a runner
    testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    testImplementation group: "io.kestra", name: "core", version: kestraVersion
    testImplementation group: "io.kestra", name: "tests", version: kestraVersion
    testImplementation group: "io.kestra", name: "script", version: kestraVersion
    testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"

    // RabbitMQ JMS client for integration tests and examples
    testImplementation "com.rabbitmq.jms:rabbitmq-jms:3.5.0"

    // ActiveMQ Artemis Jakarta client for integration tests (Jakarta JMS 3.x)
    testImplementation "org.apache.activemq:artemis-jakarta-client:2.43.0"

    // ActiveMQ Classic client for integration tests and examples (classic ActiveMQ 5.x)
    testImplementation "org.apache.activemq:activemq-client:5.19.1"
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.24"
}

test {
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()
    coordinates("${project.group}", "${project.name}", "${project.version}")
    pom {
        name = "${project.name}"
        description = "${project.group}:${project.name}:${project.version}"
        url = "https://github.com/kestra-io/${project.name}"
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'conapi-frank'
                name = 'Frank Beusenberg'
                email = 'frank@conapi.at'
            }
            developer {
                id = 'conapi-stefan'
                name = 'Stefan Fritz'
                email = 'stefan@conapi.at'
            }
        }
        scm {
            connection = 'scm:git:'
            url = "https://github.com/kestra-io/${project.name}"
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
                "X-Kestra-Name": project.name,
                "X-Kestra-Title": "JMS",
                "X-Kestra-Group": project.group + ".jms",
                "X-Kestra-Description": project.description,
                "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('main')
    }
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
